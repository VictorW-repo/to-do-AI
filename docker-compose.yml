services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-app}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - todo-network

  # FastAPI Backend with Strawberry GraphQL
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./scripts:/app/scripts
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    environment:
      # DB configuration
      - POSTGRES_SERVER=db
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-app}
      # Force using SQLite
      - USE_SQLITE=true
      - SQLITE_DB_FILE=todos.db
      # Add OpenAI key
      - OPENAI_API_KEY=sk_put_your_llm_api_key
      - PYTHONPATH=/app
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - todo-network
    command: >
      bash -c "cd /app && python -m scripts.init_db && 
              uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload"

  # Next.js Frontend with Apollo Client
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      args:
        NODE_ENV: development
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    depends_on:
      - backend
    env_file:
      - .env
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000/api/v1
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000/api/v1/graphql/ws
      - NODE_ENV=development
    restart: unless-stopped
    networks:
      - todo-network
    command: npm run dev

networks:
  todo-network:
    driver: bridge

volumes:
  postgres_data: